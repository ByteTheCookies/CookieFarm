package exploit

const (
	INFO    = "info"         // Status indicating informational output
	EXPLOIT = "exploit_info" // Status indicating exploit-specific informational output
	FAILED  = "failed"       // Status indicating flag submission failure
	ERROR   = "error"        // Status indicating a general error in flag submission
	FATAL   = "fatal"        // Status indicating a fatal error in the exploiter
	SUCCESS = "success"      // Status indicating successful flag submission
	STATS   = "stats"        // Status indicating a batch of statistics
	DEBUG   = "debug"        // Status indicating debug information
)

// ParsedFlagOutput represents the output of a parsed flag returned
// by an exploit run in the exploit_manager, ready to be submitted.
type ParsedFlagOutput struct {
	TeamID      uint16 `json:"team_id"`      // ID of the team the flag was extracted from
	PortService uint16 `json:"port_service"` // Port of the service that produced the flag
	Status      string `json:"status"`       // Status of the flag submission (eg "success", "failed", "error", "fatal")
	FlagCode    string `json:"flag_code"`    // The actual flag string
	NameService string `json:"name_service"` // Human-readable name of the service
	Message     string `json:"message"`      // Additional message or error information
}

type StatusBatchOutput struct {
	Status      string `json:"status"`       // Status of the flag submission (eg "success", "failed", "error", "fatal")
	Message     string `json:"message"`      // Additional message or error information
	NameService string `json:"name_service"` // Human-readable name of the service
	PortService uint16 `json:"port_service"` // Port of the service that produced the flag
	TotalFlag   int    `json:"total_flag"`   // Total flag collected in the batch
	SuccessTeam int    `json:"success_team"` // Total number of teams from which flags were successfully extracted
	FailedTeam  int    `json:"failed_team"`  // Total number of teams from which flag extraction failed
}
