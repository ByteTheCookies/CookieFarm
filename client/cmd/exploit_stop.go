package cmd

import (
	"os"

	"github.com/ByteTheCookies/cookieclient/internal/config"
	"github.com/ByteTheCookies/cookieclient/internal/logger"
	"github.com/spf13/cobra"
)

var stopCmd = &cobra.Command{
	Use:   "stop",
	Short: "Stop the exploit execution",
	Long:  `This command stops the execution of the currently running exploit. It gracefully terminates the exploit process and cleans up any resources used during execution.`,
	Run:   stopExploit,
}

var pid int

func init() {
	stopCmd.Flags().IntVarP(&pid, "pid", "p", -1, "Pid to the exploit file to stop")
	stopCmd.MarkFlagRequired("pid")
}

func stopExploit(cmd *cobra.Command, args []string) {
	if err := config.LoadLocalConfig(); err != nil {
		logger.Log.Error().Err(err).Msg("Error loading local configuration, try running `cookieclient config reset`")
		return
	}

	for i, exploit := range config.ArgsConfigInstance.Exploits {
		logger.Log.Info().Str("Exploit", exploit.Name).Msg("Stopping exploit")
		if exploit.PID == pid {
			proc, err := os.FindProcess(exploit.PID)
			if err != nil {
				logger.Log.Error().Err(err).Msg("Error finding process")
				return
			}
			err = proc.Kill()
			if err != nil {
				logger.Log.Error().Err(err).Msg("Error stopping exploit")
				return
			}
			config.ArgsConfigInstance.Exploits = append(config.ArgsConfigInstance.Exploits[:i], config.ArgsConfigInstance.Exploits[i+1:]...)
			config.WriteConfig()
			logger.Log.Info().Str("Exploit", exploit.Name).Msg("Exploit stopped successfully")
			return
		}
	}
	logger.Log.Warn().Msg("No exploit found with the specified PID")
}
