package cmd

import (
	"os"
	"syscall"

	"github.com/ByteTheCookies/cookieclient/internal/config"
	"github.com/ByteTheCookies/cookieclient/internal/logger"
	"github.com/spf13/cobra"
)

var listCmd = &cobra.Command{
	Use:   "list",
	Short: "List all current running exploits",
	Long:  "This command lists all currently running exploits that are registered in the local configuration.",
	Run:   ListExploit,
}

func ListExploit(cmd *cobra.Command, args []string) {
	err := config.LoadLocalConfig()
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error loading local configuration, try running `cookieclient config reset`")
		return
	}
	for i := 0; i < len(config.ArgsConfigInstance.Exploits); {
		exploit := config.ArgsConfigInstance.Exploits[i]
		proc, err := os.FindProcess(exploit.PID)
		if err != nil || proc == nil {
			logger.Log.Warn().Str("exploit", exploit.Name).Msg("Exploit removed due to invalid process")
			config.ArgsConfigInstance.Exploits = append(config.ArgsConfigInstance.Exploits[:i], config.ArgsConfigInstance.Exploits[i+1:]...)
			continue
		}
		err = proc.Signal(syscall.Signal(0))
		if err != nil {
			logger.Log.Warn().Str("exploit", exploit.Name).Msg("Exploit removed due to inactive process")
			config.ArgsConfigInstance.Exploits = append(config.ArgsConfigInstance.Exploits[:i], config.ArgsConfigInstance.Exploits[i+1:]...)
		} else {
			logger.Log.Info().Str("exploit", exploit.Name).Int("pid", exploit.PID).Msg("Available exploit")
			i++
		}
	}
	config.WriteConfig()
}
