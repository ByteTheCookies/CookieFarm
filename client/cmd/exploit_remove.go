package cmd

import (
	_ "embed"
	"os"
	"path/filepath"

	"github.com/ByteTheCookies/cookieclient/internal/config"
	"github.com/ByteTheCookies/cookieclient/internal/filesystem"
	"github.com/ByteTheCookies/cookieclient/internal/logger"
	"github.com/spf13/cobra"
)

var removeCmd = &cobra.Command{
	Use:   "remove",
	Short: "Remove an exploit template",
	Long:  `Remove an exploit template from the CookieFarm client.`,
	Run:   Remove,
}

var nameExploit string // Name of the exploit template

func init() {
	removeCmd.Flags().StringVarP(&nameExploit, "name", "n", "", "Name of the exploit template")
	removeCmd.MarkFlagRequired("name")
}

func Remove(cmd *cobra.Command, args []string) {
	path := config.DefaultConfigPath
	if _, err := os.Stat(config.DefaultConfigPath); os.IsNotExist(err) {
		logger.Log.Warn().Msg("Default exploit path not exists... Creating it")
		err := os.MkdirAll(config.DefaultConfigPath, os.ModePerm)
		if err != nil {
			logger.Log.Error().Err(err).Msg("Error creating exploit path")
			return
		}
	}

	logger.Log.Debug().Str("Exploit name", nameExploit).Msg("Creating exploit template")

	namePathNormalized, err := filesystem.NormalizeNamePathExploit(nameExploit)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error normalizing exploit name")
		return
	}

	if filesystem.IsPath(namePathNormalized) {
		path = namePathNormalized
	} else {
		path = filepath.Join(path, namePathNormalized)
	}

	err = os.Remove(path)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error creating exploit file")
		return
	}

	logger.Log.Info().Str("Exploit path", path).Msg("File created successfully")
}
