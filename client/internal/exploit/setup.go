package exploit

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"

	"github.com/ByteTheCookies/cookieclient/internal/api"
	"github.com/ByteTheCookies/cookieclient/internal/config"
	"github.com/ByteTheCookies/cookieclient/internal/filesystem"
	"github.com/ByteTheCookies/cookieclient/internal/logger"
)

// SetupClient handles the full initialization process for the attack command
func Setup(detach bool) error {
	var err error

	err = config.LoadLocalConfig()
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error loading local configuration, try running `cookieclient config reset`")
		return err
	}

	if detach {
		fmt.Println(logger.Blue + "[INFO]" + logger.Reset + " | Detaching from terminal")
		Detach()
	}

	config.ArgsAttackInstance.ExploitPath, err = filesystem.NormalizeNamePathExploit(config.ArgsAttackInstance.ExploitPath)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error normalizing exploit name")
		return err
	}

	if !filesystem.IsPath(config.ArgsAttackInstance.ExploitPath) {
		exploitsDir := filepath.Join(config.DefaultConfigPath, "exploits")
		config.ArgsAttackInstance.ExploitPath = filepath.Join(exploitsDir, config.ArgsAttackInstance.ExploitPath)
	}

	logger.Log.Debug().Str("Exploit path", config.ArgsAttackInstance.ExploitPath).Msg("Using default exploit path")

	err = ValidateArgs(config.ArgsAttackInstance)
	if err != nil {
		return fmt.Errorf("invalid arguments: %w", err)
	}

	logger.Log.Debug().
		Int("ThreadCount", config.ArgsAttackInstance.ThreadCount).
		Int("Tick time", config.ArgsAttackInstance.TickTime).
		Str("ExploitPath", config.ArgsAttackInstance.ExploitPath).
		Msg("Arguments validated")

	config.Token, err = config.GetSession()
	if err != nil {
		return fmt.Errorf("failed to get session token: %w, try to run `cookieclient config login -P <password>`", err)
	}

	config.Current, err = api.GetConfig()
	if err != nil {
		return fmt.Errorf("failed to get config: %w", err)
	}

	logger.Log.Debug().Msgf("Current configuration: %+v", config.Current)

	if !config.Current.Configured {
		logger.Log.Fatal().Msg("Server not configured. Please run the configurator before using the client.")
	}

	return nil
}

// ValidateArgs validates the arguments passed to the program
func ValidateArgs(args config.ArgsAttack) error {
	if args.TickTime < 1 {
		return errors.New("tick time must be at least 1")
	}

	exploitPath, err := filepath.Abs(args.ExploitPath)
	if err != nil {
		return fmt.Errorf("error resolving exploit path: %v", err)
	}

	if info, err := os.Stat(exploitPath); err == nil && info.Mode()&0o111 == 0 {
		return errors.New("exploit file is not executable")
	}

	if _, err := os.Stat(exploitPath); os.IsNotExist(err) {
		return errors.New("exploit not found in the exploits directory")
	}

	return nil
}
