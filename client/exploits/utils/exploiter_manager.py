import sys
from .server import get_ip_teams
from .exploiter import attack

server_address: str = sys.argv[1]
server_password: str = sys.argv[2]
tick_time: int = int(sys.argv[3])
flag_regex: str = sys.argv[4]
# logger = init_logger(logname=sys.argv[5])


# from .server import Server
# from .exploiter import Exploiter
# from .logger import init_logger
# def exploit_manager():
#     server_address: str = sys.argv[1]
#     server_password: str = sys.argv[2]
#     tick_time: int = int(sys.argv[3])
#     flag_regex: str = sys.argv[4]

#     logger.info("Starting exploit manager")

#     logger.info("Initializing Server Object")
#     logger.debug(f"Init params: address={server_address}, password={server_password}")
#     server: Server = Server(address=server_address, password=server_password)

#     logger.info("Initializing Exploiter Object")
#     logger.debug(f"Init params: flag_regex={flag_regex}, tick={tick_time}")
#     exploiter: Exploiter = Exploiter(flag_regex=flag_regex, tick=tick_time)

#     def decorator(exploit_func):
#         ip_teams: list[str] = server.get_ip_teams("/api/v1/config")

#         def wrapper(*args, **kwargs):
#             if 'port' not in kwargs:
#                 raise ValueError("Port is required")
#             port = kwargs['port']

#             exploiter.attack(exploit_function=exploit_func, ip_teams=ip_teams, port_service=port)

#         return wrapper

#     return decorator
#
# ----------



def decorator(exploit_func):

    def wrapper(*args, **kwargs):
        if 'port' not in kwargs:
            raise ValueError("Port is required")
        port = kwargs['port']

        exploiter.attack(exploit_function=exploit_func, ip_teams=ip_teams, port_service=port)

    return wrapper
