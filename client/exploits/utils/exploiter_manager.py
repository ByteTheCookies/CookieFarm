#!../../../venv/bin/python3

import requests
import json


def exploit_manager(server_ip: str = "127.0.0.1"):
    if not server_ip:
        raise ValueError("Service IP is required")

    if not isinstance(server_ip, str):
        raise TypeError("Service IP must be a string")

    # r = requests.get(f"http://{server_ip}/api/v1/config/")

    def decorator(exploit_func):
        # format_ip_teams: str
        # my_team_ip: str
        # range_ip: int

        # format_ip_teams = r.json()['client']['format_ip_teams']
        # range_ip_teams = r.json()['client']['range_ip_teams']
        # my_team_ip = r.json()['client']['my_team_ip']

        # ip_teams = [format_ip_teams.format(i) for i in range(range_ip + 1)].remove(my_team_ip)
        ip_teams = ["127.0.0.1"]

        def wrapper(*args, **kwargs):
            if 'port' not in kwargs:
                raise ValueError("Port is required")

            port = kwargs['port']

            for ip in ip_teams:
                exploit_func(ip=ip, port=port)

        return wrapper

    return decorator
