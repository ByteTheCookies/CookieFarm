#!../../../venv/bin/python3

import requests
import json

# TODO: Implement get flag from every web source (text or html page)
# TODO: Implement number of threads to use - client choice
# TODO: Implement of number of second to run the exploit - client choice
# TODO: Implement class for manageing exploit, server and more
#
# TODO: Test and Docker Net - 10.0.0.0/24



def login(server_ip: str, password: str):
    r = requests.post(f"{server_ip}/api/v1/auth/login", data={"password": password})
    if not r.ok:
        raise Exception(f"Failed to login: {r.status_code}")
    return r.json()['token']


def exploit_manager(
    server_ip: str = "http://127.0.0.1:8080",
    password: str = "password",
    threads_num: int = 10,
    tick_time: int = 120
):
    if not server_ip:
        raise ValueError("Service IP is required")

    if not isinstance(server_ip, str):
        raise TypeError("Service IP must be a string")

    token = login(server_ip, password)
    r = requests.get(f"{server_ip}/api/v1/config", headers={"Authorization": f"Bearer {token}"})
    if not r.ok:
        raise Exception(f"Failed to get config from server: {r.status_code}")

    def decorator(exploit_func):
        format_ip_teams: str
        my_team_ip: str
        range_ip_teams: int
        ip_teams: list[str]

        format_ip_teams = r.json()['client']['format_ip_teams']
        range_ip_teams = int(r.json()['client']['range_ip_teams'])
        my_team_ip = r.json()['client']['my_team_ip']

        ip_teams = [format_ip_teams.format(i) for i in range(range_ip_teams + 1)]
        ip_teams = ip_teams.remove(my_team_ip) if my_team_ip in ip_teams else ip_teams
        ip_teams = ["127.0.0.1"]

        def wrapper(*args, **kwargs):
            if 'port' not in kwargs:
                raise ValueError("Port is required")

            port = kwargs['port']

            while True:
                for ip in ip_teams:
                    item = {
                        'team_id': ip.split('.')[2],
                        'service_port': port,
                        'flag_code': exploit_func(ip=ip, port=port)
                    }
                    print(json.dumps(item))

        return wrapper

    return decorator
