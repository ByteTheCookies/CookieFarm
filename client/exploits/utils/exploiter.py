from re import Pattern
from json import dumps
from typing import Callable
from collections import namedtuple
from asyncio import gather, get_event_loop, sleep


Flag = namedtuple("Flag", ["team_id", "service_port", "flag_code"])

def get_flag_from_multisource(source:str|list[str], regex: Pattern) -> list[str]:
    if not source:
        raise ValueError("Source cannot be empty")

    if isinstance(source, list):
        if not all(isinstance(item, str) for item in source):
            raise ValueError("All items in the list must be strings")

        if not all(regex.match(item) for item in source):
            raise ValueError("All items in the list must match the flag regex")

        return source

    if not isinstance(source, str):
        raise TypeError("Source must be a string or a list of strings")

    return regex.findall(source)

async def dispatch_exploit(exploit_function:Callable, ip_team:str, port_service:int, regex: Pattern) -> tuple[str, list[str]]:
    return ip_team, get_flag_from_multisource(exploit_function(ip_team, port_service), regex)

async def dispatch_exploits(
    exploit_function:Callable,
    ip_teams:set[str],
    port_service:int,
    regex: Pattern
):
    results = await gather(*[dispatch_exploit(exploit_function, ip_team, port_service, regex) for ip_team in ip_teams])
    for result in results:
        for flag in result[1]:
            print(
                dumps(
                    Flag(
                        int(result[0].split('.')[2]),
                        port_service,
                        flag
                    )._asdict(),
                ),
                flush=True
            )

async def attack_loop(
    exploit_function: Callable,
    ip_teams: set[str],
    port_service: int,
    flag_regex_re: Pattern,
    tick_time: int,
) -> None:
    while True:
        start = get_event_loop().time()
        await dispatch_exploits(exploit_function, ip_teams, port_service, flag_regex_re)
        elapsed = get_event_loop().time() - start
        await sleep(max(0, tick_time - elapsed))
